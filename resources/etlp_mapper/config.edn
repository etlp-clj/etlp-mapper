{:duct.profile/base
 {:duct.core/project-ns etlp-mapper

  :duct.router/ataraxy
  {:routes {[:get "/"] [:etlp-mapper.handler/index]
            [:get "/whoami"] [:etlp-mapper.handler/whoami]
            [:post "/orgs"] [:etlp-mapper.handler.orgs/create]
            [:post "/orgs/" org-id "/invites"] [:etlp-mapper.handler.invites/create org-id]
            [:post "/invites/accept"] [:etlp-mapper.handler.invites/accept]
            [:post "/me/active-org"] [:etlp-mapper.handler.me/set-active-org]
            [:post "/billing/portal"] [:etlp-mapper.handler.billing/portal]
            [:get "/mappings"] [:etlp-mapper.handler.mappings/list]
            [:post "/mappings" {{:keys [title content]} :body-params}]
            [:etlp-mapper.handler.mappings/create title content]

            [:put "/mappings/" id {{:keys [content]} :body-params}]
            [:etlp-mapper.handler.mappings/update ^int id content]

            [:post "/mappings/" id "/apply" {{:keys [data]} :body-params}]
            [:etlp-mapper.handler/apply-mappings ^int id data]

            [:post "/mappings/test"]
            [:etlp-mapper.handler.mappings]

            [:get    "/mappings/" id] [:etlp-mapper.handler.mappings/find ^int id]
            [:get    "/mappings/" id "/_history"] [:etlp-mapper.handler.mappings/history ^int id]
            [:get    "/mappings/" id "/_history/" version] [:etlp-mapper.handler.mappings/traverse-history ^int id version]
            [:delete "/mappings/" id] [:etlp-mapper.handler.mappings/destroy ^int id]}}

  :duct.handler/root {:middleware [#ig/ref :etlp-mapper.auth-component/require-org
                                   #ig/ref :etlp-mapper.auth-component/auth
                                   #ig/ref :etlp-mapper.middlewares/cors]}


  :duct.migrator/ragtime
  {:migrations [#ig/ref :etlp-mapper.migration/create-organizations
                #ig/ref :etlp-mapper.migration/create-users
                #ig/ref :etlp-mapper.migration/create-organization-members
                #ig/ref :etlp-mapper.migration/create-organization-invites
                #ig/ref :etlp-mapper.migration/create-organization-subscriptions
                #ig/ref :etlp-mapper.migration/create-audit-logs
                #ig/ref :etlp-mapper.migration/create-ai-usage-logs
                #ig/ref :etlp-mapper.migration/create-mappings
                #ig/ref :etlp-mapper.migration/create-mappings-history
                #ig/ref :etlp-mapper.migration/insert-mapping-history
                #ig/ref :etlp-mapper.migration/insert_mapping_history_trigger
                #ig/ref :etlp-mapper.migration/updated-at-trigger
                #ig/ref :etlp-mapper.migration/updated-mapping-trigger]}

  ; Core tables
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-organizations]
  {:up ["CREATE TABLE organizations (id UUID PRIMARY KEY, name TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE UNIQUE INDEX organizations_name_idx ON organizations(name);"]
   :down ["DROP TABLE organizations;"]}

  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-users]
  {:up ["CREATE TABLE users (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), idp_sub TEXT NOT NULL UNIQUE, email TEXT NOT NULL, name TEXT, last_used_org_id UUID REFERENCES organizations(id), created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE UNIQUE INDEX users_email_idx ON users(email);"]
   :down ["DROP TABLE users;"]}

  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-organization-members]
  {:up ["CREATE TABLE organization_members (organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE, user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE, role TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (organization_id, user_id)); CREATE INDEX organization_members_user_id_idx ON organization_members(user_id);"]
   :down ["DROP TABLE organization_members;"]}

  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-organization-invites]
  {:up ["CREATE TABLE organization_invites (id UUID PRIMARY KEY, organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE, email TEXT NOT NULL, token TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE INDEX organization_invites_organization_id_idx ON organization_invites(organization_id); CREATE UNIQUE INDEX organization_invites_token_idx ON organization_invites(token);"]
   :down ["DROP TABLE organization_invites;"]}

  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-organization-subscriptions]
  {:up ["CREATE TABLE organization_subscriptions (organization_id UUID PRIMARY KEY REFERENCES organizations(id) ON DELETE CASCADE, plan TEXT NOT NULL, status TEXT NOT NULL, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE INDEX organization_subscriptions_status_idx ON organization_subscriptions(status);"]
   :down ["DROP TABLE organization_subscriptions;"]}

  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-audit-logs]
  {:up ["CREATE TABLE audit_logs (id BIGSERIAL PRIMARY KEY, organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE, user_id UUID REFERENCES users(id), action TEXT NOT NULL, context TEXT, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE INDEX audit_logs_organization_id_idx ON audit_logs(organization_id); CREATE INDEX audit_logs_user_id_idx ON audit_logs(user_id);"]
   :down ["DROP TABLE audit_logs;"]}

  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-ai-usage-logs]
  {:up ["CREATE TABLE ai_usage_logs (id BIGSERIAL PRIMARY KEY, organization_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE, user_id UUID REFERENCES users(id), feature_type TEXT NOT NULL, input_tokens INT NOT NULL, output_tokens INT NOT NULL, created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE INDEX ai_usage_logs_organization_id_idx ON ai_usage_logs(organization_id); CREATE INDEX ai_usage_logs_user_id_idx ON ai_usage_logs(user_id);"]
   :down ["DROP TABLE ai_usage_logs;"]}

  ; Mapper specific tables
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-mappings]
  {:up ["CREATE TABLE mappings (id SERIAL PRIMARY KEY, title TEXT NOT NULL, content JSONB, organization_id UUID NOT NULL REFERENCES organizations(id), created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE INDEX mappings_organization_id_idx ON mappings(organization_id);"]
   :down ["DROP TABLE mappings;"]}
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/create-mappings-history]
  {:up ["CREATE TABLE mappings_history (id SERIAL PRIMARY KEY, original_id INT, txnid TEXT, title TEXT NOT NULL, content JSONB, organization_id UUID NOT NULL REFERENCES organizations(id), created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP); CREATE INDEX mappings_history_original_id_idx ON mappings_history(original_id); CREATE INDEX mappings_history_organization_id_idx ON mappings_history(organization_id);"]
   :down ["DROP TABLE mappings_history;"]}

;DB procedure and triggers for cross cutting concerns
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/insert-mapping-history]
  {:up ["CREATE OR REPLACE FUNCTION insert_mapping_history()
RETURNS TRIGGER AS $$
DECLARE
  txnid TEXT;
BEGIN
  txnid := txid_current();
  INSERT INTO mappings_history (
    title,
    content,
    created_at,
    updated_at,
    original_id,
    organization_id,
    txnid
  )
  VALUES (
    OLD.title,
    OLD.content,
    OLD.created_at,
    OLD.updated_at,
    OLD.id,
    OLD.organization_id,
    txnid
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;"]
   :down ["DROP FUNCTION insert_mapping_history;"]}
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/insert_mapping_history_trigger]
  {:up ["CREATE TRIGGER insert_mapping_history_trigger BEFORE UPDATE ON mappings FOR EACH ROW EXECUTE FUNCTION insert_mapping_history();"]
   :down ["DROP TRIGGER insert_mapping_history_trigger ON mappings;"]}
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/updated-at-trigger]
  {:up ["CREATE OR REPLACE FUNCTION update_changetimestamp_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = now(); RETURN NEW; END; $$ language 'plpgsql';"]
   :down  ["DROP FUNCTION update_changetimestamp_column;"]}
  [:duct.migrator.ragtime/sql :etlp-mapper.migration/updated-mapping-trigger]
  {:up ["CREATE TRIGGER update_mapping_changetimestamp BEFORE UPDATE ON mappings FOR EACH ROW EXECUTE PROCEDURE update_changetimestamp_column();"]
   :down  ["DROP TRIGGER update_mapping_changetimestamp ON mappings;"]}



;Query handlers for Rest Endpoints
  [:duct.handler.sql/query :etlp-mapper.handler.mappings/list]
  {:request {{org-id :org/id} :identity}
   :sql ["SELECT * FROM mappings WHERE organization_id = ?::uuid" org-id]
   :hrefs {:href "/mappings/{id}"}
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  :etlp-mapper.middlewares/cors
  {}

  :etlp-mapper.handler/index
  {:db #ig/ref :duct.database/sql}

  :etlp-mapper.handler/whoami
  {}

  :etlp-mapper.handler.mappings
  {:db #ig/ref :duct.database/sql
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  :etlp-mapper.handler/apply-mappings
  {:db #ig/ref :duct.database/sql
   :request {[_ id data] :ataraxy/result}
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  :etlp-mapper.handler.orgs/create {:db #ig/ref :duct.database/sql}

  :etlp-mapper.handler.invites/create {:db #ig/ref :duct.database/sql
                                       :middleware [#ig/ref :etlp-mapper.auth-component/require-role-admin]}

  :etlp-mapper.handler.invites/accept {:db #ig/ref :duct.database/sql}

  :etlp-mapper.handler.me/set-active-org {}

  :etlp-mapper.handler.billing/portal {:middleware [#ig/ref :etlp-mapper.auth-component/require-role-admin]}

  :etlp-mapper.auth-component/require-role-admin {:role :admin}
  :etlp-mapper.auth-component/require-role-mapper {:role :mapper}

  [:duct.handler.sql/insert :etlp-mapper.handler.mappings/create]
  {:request {[_ title content] :ataraxy/result
             {org-id :org/id} :identity}

  :sql     ["INSERT INTO mappings (title, content, organization_id) VALUES (?, ?, CAST(? AS UUID))" title content org-id]
  :location "mappings/{id}"
   :hrefs {:href "/mappings/{id}"}
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  [:duct.handler.sql/query-one :etlp-mapper.handler.mappings/find]
  {:request {[_ id] :ataraxy/result
             {org-id :org/id} :identity}
   :sql     ["SELECT * FROM mappings WHERE id = ? AND organization_id = ?::uuid" id org-id]
   :hrefs   {:href "/mappings/{id}"}
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  [:duct.handler.sql/execute :etlp-mapper.handler.mappings/destroy]
  {:request {[_ id] :ataraxy/result
             {org-id :org/id} :identity}

   :sql     ["DELETE FROM mappings WHERE id = ? AND organization_id = ?::uuid" id org-id]
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  [:duct.handler.sql/execute :etlp-mapper.handler.mappings/update]
  {:request {[_ id content] :ataraxy/result
             {org-id :org/id} :identity}
   :sql     ["UPDATE mappings SET content = ? WHERE id = ? AND organization_id = ?::uuid" content id org-id]
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  [:duct.handler.sql/query :etlp-mapper.handler.mappings/history]
  {:request {[_ id] :ataraxy/result
             {org-id :org/id} :identity}
   :sql ["SELECT mh.title, mh.content, mh.created_at, mh.updated_at, mh.txnid FROM mappings m JOIN mappings_history mh ON m.id = mh.original_id WHERE m.id = ? AND m.organization_id = ? AND mh.organization_id = ?::uuid" id org-id org-id]
   :hrefs {:href "/mappings/{id}/_history/{txnid}"}
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}

  [:duct.handler.sql/query-one :etlp-mapper.handler.mappings/traverse-history]
  {:request {[_ id version] :ataraxy/result
             {org-id :org/id} :identity}
   :sql ["SELECT mh.title, mh.content, mh.created_at, mh.updated_at, mh.txnid FROM mappings m JOIN mappings_history mh ON m.id = mh.original_id WHERE m.id = ? AND mh.txnid = ? AND m.organization_id = ? AND mh.organization_id = ?::uuid" id version org-id org-id]
   :middleware [#ig/ref :etlp-mapper.auth-component/require-role-mapper]}}


 ;:etlp-mapper/etlp {}




 :duct.profile/dev   #duct/include "dev"
 :duct.profile/prod  #duct/include "prod.edn"
 :duct.module/logging {}
 :duct.module.web/api {}
 :duct.module/sql {}}
